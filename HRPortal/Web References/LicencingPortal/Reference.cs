//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by Microsoft.VSDesigner, Version 4.0.30319.42000.
// 
#pragma warning disable 1591

namespace HRPortal.LicencingPortal {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="LicencingPortal_Binding", Namespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal")]
    public partial class LicencingPortal : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback FnRegistrationOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback PortalResetPasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnLicenceApplicationHeaderOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnInsertLocationOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnInsertAgencyActivitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnInsertAgentFacilitiesOperationCompleted;
        
        private System.Threading.SendOrPostCallback FnInsertGovernmentComplianceOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public LicencingPortal() {
            this.Url = global::HRPortal.Properties.Settings.Default.HRPortal_LicencingPortal_LicencingPortal;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event FnRegistrationCompletedEventHandler FnRegistrationCompleted;
        
        /// <remarks/>
        public event FnResetPasswordCompletedEventHandler FnResetPasswordCompleted;
        
        /// <remarks/>
        public event PortalResetPasswordCompletedEventHandler PortalResetPasswordCompleted;
        
        /// <remarks/>
        public event FnLicenceApplicationHeaderCompletedEventHandler FnLicenceApplicationHeaderCompleted;
        
        /// <remarks/>
        public event FnInsertLocationCompletedEventHandler FnInsertLocationCompleted;
        
        /// <remarks/>
        public event FnInsertAgencyActivitiesCompletedEventHandler FnInsertAgencyActivitiesCompleted;
        
        /// <remarks/>
        public event FnInsertAgentFacilitiesCompletedEventHandler FnInsertAgentFacilitiesCompleted;
        
        /// <remarks/>
        public event FnInsertGovernmentComplianceCompletedEventHandler FnInsertGovernmentComplianceCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnRegistration", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnRegistration_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnRegistration(string firstname, string middlename, string lastname, string tphoneNumber, string tResidentialsAddress, string tpostalAddress, string tAlternativeNumber, string twhatsappNumber, string twebsite, string tcertificateNumber, System.DateTime tDate, string temailAddress) {
            object[] results = this.Invoke("FnRegistration", new object[] {
                        firstname,
                        middlename,
                        lastname,
                        tphoneNumber,
                        tResidentialsAddress,
                        tpostalAddress,
                        tAlternativeNumber,
                        twhatsappNumber,
                        twebsite,
                        tcertificateNumber,
                        tDate,
                        temailAddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnRegistrationAsync(string firstname, string middlename, string lastname, string tphoneNumber, string tResidentialsAddress, string tpostalAddress, string tAlternativeNumber, string twhatsappNumber, string twebsite, string tcertificateNumber, System.DateTime tDate, string temailAddress) {
            this.FnRegistrationAsync(firstname, middlename, lastname, tphoneNumber, tResidentialsAddress, tpostalAddress, tAlternativeNumber, twhatsappNumber, twebsite, tcertificateNumber, tDate, temailAddress, null);
        }
        
        /// <remarks/>
        public void FnRegistrationAsync(string firstname, string middlename, string lastname, string tphoneNumber, string tResidentialsAddress, string tpostalAddress, string tAlternativeNumber, string twhatsappNumber, string twebsite, string tcertificateNumber, System.DateTime tDate, string temailAddress, object userState) {
            if ((this.FnRegistrationOperationCompleted == null)) {
                this.FnRegistrationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnRegistrationOperationCompleted);
            }
            this.InvokeAsync("FnRegistration", new object[] {
                        firstname,
                        middlename,
                        lastname,
                        tphoneNumber,
                        tResidentialsAddress,
                        tpostalAddress,
                        tAlternativeNumber,
                        twhatsappNumber,
                        twebsite,
                        tcertificateNumber,
                        tDate,
                        temailAddress}, this.FnRegistrationOperationCompleted, userState);
        }
        
        private void OnFnRegistrationOperationCompleted(object arg) {
            if ((this.FnRegistrationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnRegistrationCompleted(this, new FnRegistrationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnResetPassword", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnResetPassword_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnResetPassword(string emailaddress, string originalpass, string newpass, string confirmpass) {
            object[] results = this.Invoke("FnResetPassword", new object[] {
                        emailaddress,
                        originalpass,
                        newpass,
                        confirmpass});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnResetPasswordAsync(string emailaddress, string originalpass, string newpass, string confirmpass) {
            this.FnResetPasswordAsync(emailaddress, originalpass, newpass, confirmpass, null);
        }
        
        /// <remarks/>
        public void FnResetPasswordAsync(string emailaddress, string originalpass, string newpass, string confirmpass, object userState) {
            if ((this.FnResetPasswordOperationCompleted == null)) {
                this.FnResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnResetPasswordOperationCompleted);
            }
            this.InvokeAsync("FnResetPassword", new object[] {
                        emailaddress,
                        originalpass,
                        newpass,
                        confirmpass}, this.FnResetPasswordOperationCompleted, userState);
        }
        
        private void OnFnResetPasswordOperationCompleted(object arg) {
            if ((this.FnResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnResetPasswordCompleted(this, new FnResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:PortalResetPassword", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="PortalResetPassword_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string PortalResetPassword(string emailaddress) {
            object[] results = this.Invoke("PortalResetPassword", new object[] {
                        emailaddress});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void PortalResetPasswordAsync(string emailaddress) {
            this.PortalResetPasswordAsync(emailaddress, null);
        }
        
        /// <remarks/>
        public void PortalResetPasswordAsync(string emailaddress, object userState) {
            if ((this.PortalResetPasswordOperationCompleted == null)) {
                this.PortalResetPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnPortalResetPasswordOperationCompleted);
            }
            this.InvokeAsync("PortalResetPassword", new object[] {
                        emailaddress}, this.PortalResetPasswordOperationCompleted, userState);
        }
        
        private void OnPortalResetPasswordOperationCompleted(object arg) {
            if ((this.PortalResetPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.PortalResetPasswordCompleted(this, new PortalResetPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnLicenceApplicationHeade" +
            "r", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnLicenceApplicationHeader_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnLicenceApplicationHeader(string temail, string tapplicationNo, int tapplicationCategory, int tApplicantType, string tPhysicalLocation, int tPhysicalAddressStatus, string tLicenseType, string tCustomerNumber) {
            object[] results = this.Invoke("FnLicenceApplicationHeader", new object[] {
                        temail,
                        tapplicationNo,
                        tapplicationCategory,
                        tApplicantType,
                        tPhysicalLocation,
                        tPhysicalAddressStatus,
                        tLicenseType,
                        tCustomerNumber});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnLicenceApplicationHeaderAsync(string temail, string tapplicationNo, int tapplicationCategory, int tApplicantType, string tPhysicalLocation, int tPhysicalAddressStatus, string tLicenseType, string tCustomerNumber) {
            this.FnLicenceApplicationHeaderAsync(temail, tapplicationNo, tapplicationCategory, tApplicantType, tPhysicalLocation, tPhysicalAddressStatus, tLicenseType, tCustomerNumber, null);
        }
        
        /// <remarks/>
        public void FnLicenceApplicationHeaderAsync(string temail, string tapplicationNo, int tapplicationCategory, int tApplicantType, string tPhysicalLocation, int tPhysicalAddressStatus, string tLicenseType, string tCustomerNumber, object userState) {
            if ((this.FnLicenceApplicationHeaderOperationCompleted == null)) {
                this.FnLicenceApplicationHeaderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnLicenceApplicationHeaderOperationCompleted);
            }
            this.InvokeAsync("FnLicenceApplicationHeader", new object[] {
                        temail,
                        tapplicationNo,
                        tapplicationCategory,
                        tApplicantType,
                        tPhysicalLocation,
                        tPhysicalAddressStatus,
                        tLicenseType,
                        tCustomerNumber}, this.FnLicenceApplicationHeaderOperationCompleted, userState);
        }
        
        private void OnFnLicenceApplicationHeaderOperationCompleted(object arg) {
            if ((this.FnLicenceApplicationHeaderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnLicenceApplicationHeaderCompleted(this, new FnLicenceApplicationHeaderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnInsertLocation", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnInsertLocation_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnInsertLocation(string tapplicationNo, string tAddress, string tPhysicalLocation, string tpostcode, string tcounty, string tcity) {
            object[] results = this.Invoke("FnInsertLocation", new object[] {
                        tapplicationNo,
                        tAddress,
                        tPhysicalLocation,
                        tpostcode,
                        tcounty,
                        tcity});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnInsertLocationAsync(string tapplicationNo, string tAddress, string tPhysicalLocation, string tpostcode, string tcounty, string tcity) {
            this.FnInsertLocationAsync(tapplicationNo, tAddress, tPhysicalLocation, tpostcode, tcounty, tcity, null);
        }
        
        /// <remarks/>
        public void FnInsertLocationAsync(string tapplicationNo, string tAddress, string tPhysicalLocation, string tpostcode, string tcounty, string tcity, object userState) {
            if ((this.FnInsertLocationOperationCompleted == null)) {
                this.FnInsertLocationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnInsertLocationOperationCompleted);
            }
            this.InvokeAsync("FnInsertLocation", new object[] {
                        tapplicationNo,
                        tAddress,
                        tPhysicalLocation,
                        tpostcode,
                        tcounty,
                        tcity}, this.FnInsertLocationOperationCompleted, userState);
        }
        
        private void OnFnInsertLocationOperationCompleted(object arg) {
            if ((this.FnInsertLocationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnInsertLocationCompleted(this, new FnInsertLocationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnInsertAgencyActivities", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnInsertAgencyActivities_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnInsertAgencyActivities(string tapplicationNo, string tActivityCode) {
            object[] results = this.Invoke("FnInsertAgencyActivities", new object[] {
                        tapplicationNo,
                        tActivityCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnInsertAgencyActivitiesAsync(string tapplicationNo, string tActivityCode) {
            this.FnInsertAgencyActivitiesAsync(tapplicationNo, tActivityCode, null);
        }
        
        /// <remarks/>
        public void FnInsertAgencyActivitiesAsync(string tapplicationNo, string tActivityCode, object userState) {
            if ((this.FnInsertAgencyActivitiesOperationCompleted == null)) {
                this.FnInsertAgencyActivitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnInsertAgencyActivitiesOperationCompleted);
            }
            this.InvokeAsync("FnInsertAgencyActivities", new object[] {
                        tapplicationNo,
                        tActivityCode}, this.FnInsertAgencyActivitiesOperationCompleted, userState);
        }
        
        private void OnFnInsertAgencyActivitiesOperationCompleted(object arg) {
            if ((this.FnInsertAgencyActivitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnInsertAgencyActivitiesCompleted(this, new FnInsertAgencyActivitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnInsertAgentFacilities", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnInsertAgentFacilities_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnInsertAgentFacilities(string tapplicationNo, string tActivityCode, int tquantity, string tFacilityCode) {
            object[] results = this.Invoke("FnInsertAgentFacilities", new object[] {
                        tapplicationNo,
                        tActivityCode,
                        tquantity,
                        tFacilityCode});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnInsertAgentFacilitiesAsync(string tapplicationNo, string tActivityCode, int tquantity, string tFacilityCode) {
            this.FnInsertAgentFacilitiesAsync(tapplicationNo, tActivityCode, tquantity, tFacilityCode, null);
        }
        
        /// <remarks/>
        public void FnInsertAgentFacilitiesAsync(string tapplicationNo, string tActivityCode, int tquantity, string tFacilityCode, object userState) {
            if ((this.FnInsertAgentFacilitiesOperationCompleted == null)) {
                this.FnInsertAgentFacilitiesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnInsertAgentFacilitiesOperationCompleted);
            }
            this.InvokeAsync("FnInsertAgentFacilities", new object[] {
                        tapplicationNo,
                        tActivityCode,
                        tquantity,
                        tFacilityCode}, this.FnInsertAgentFacilitiesOperationCompleted, userState);
        }
        
        private void OnFnInsertAgentFacilitiesOperationCompleted(object arg) {
            if ((this.FnInsertAgentFacilitiesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnInsertAgentFacilitiesCompleted(this, new FnInsertAgentFacilitiesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("urn:microsoft-dynamics-schemas/codeunit/LicencingPortal:FnInsertGovernmentComplia" +
            "nce", RequestNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", ResponseElementName="FnInsertGovernmentCompliance_Result", ResponseNamespace="urn:microsoft-dynamics-schemas/codeunit/LicencingPortal", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute("return_value")]
        public string FnInsertGovernmentCompliance(string tapplicationNo, string tCertificateCode, string tcertificateDescription, string tcertificateNo, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime dateOfIssue, [System.Xml.Serialization.XmlElementAttribute(DataType="date")] System.DateTime dateOfExpiry, string authorityIssuingCertificate) {
            object[] results = this.Invoke("FnInsertGovernmentCompliance", new object[] {
                        tapplicationNo,
                        tCertificateCode,
                        tcertificateDescription,
                        tcertificateNo,
                        dateOfIssue,
                        dateOfExpiry,
                        authorityIssuingCertificate});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void FnInsertGovernmentComplianceAsync(string tapplicationNo, string tCertificateCode, string tcertificateDescription, string tcertificateNo, System.DateTime dateOfIssue, System.DateTime dateOfExpiry, string authorityIssuingCertificate) {
            this.FnInsertGovernmentComplianceAsync(tapplicationNo, tCertificateCode, tcertificateDescription, tcertificateNo, dateOfIssue, dateOfExpiry, authorityIssuingCertificate, null);
        }
        
        /// <remarks/>
        public void FnInsertGovernmentComplianceAsync(string tapplicationNo, string tCertificateCode, string tcertificateDescription, string tcertificateNo, System.DateTime dateOfIssue, System.DateTime dateOfExpiry, string authorityIssuingCertificate, object userState) {
            if ((this.FnInsertGovernmentComplianceOperationCompleted == null)) {
                this.FnInsertGovernmentComplianceOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFnInsertGovernmentComplianceOperationCompleted);
            }
            this.InvokeAsync("FnInsertGovernmentCompliance", new object[] {
                        tapplicationNo,
                        tCertificateCode,
                        tcertificateDescription,
                        tcertificateNo,
                        dateOfIssue,
                        dateOfExpiry,
                        authorityIssuingCertificate}, this.FnInsertGovernmentComplianceOperationCompleted, userState);
        }
        
        private void OnFnInsertGovernmentComplianceOperationCompleted(object arg) {
            if ((this.FnInsertGovernmentComplianceCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FnInsertGovernmentComplianceCompleted(this, new FnInsertGovernmentComplianceCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnRegistrationCompletedEventHandler(object sender, FnRegistrationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnRegistrationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnRegistrationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnResetPasswordCompletedEventHandler(object sender, FnResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void PortalResetPasswordCompletedEventHandler(object sender, PortalResetPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class PortalResetPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal PortalResetPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnLicenceApplicationHeaderCompletedEventHandler(object sender, FnLicenceApplicationHeaderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnLicenceApplicationHeaderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnLicenceApplicationHeaderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnInsertLocationCompletedEventHandler(object sender, FnInsertLocationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnInsertLocationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnInsertLocationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnInsertAgencyActivitiesCompletedEventHandler(object sender, FnInsertAgencyActivitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnInsertAgencyActivitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnInsertAgencyActivitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnInsertAgentFacilitiesCompletedEventHandler(object sender, FnInsertAgentFacilitiesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnInsertAgentFacilitiesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnInsertAgentFacilitiesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    public delegate void FnInsertGovernmentComplianceCompletedEventHandler(object sender, FnInsertGovernmentComplianceCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FnInsertGovernmentComplianceCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FnInsertGovernmentComplianceCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
}

#pragma warning restore 1591